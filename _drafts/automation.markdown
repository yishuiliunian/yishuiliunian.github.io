---
layout: post
title: "Automation"
date: 2017-04-27T19:53:10+08:00
categories: iOS
---


# 创建工具来辅助SDK开发

> 当同样的代码写了三遍的时候，现在眼瞅着要写第四遍，是继续写呢还是说另辟蹊径？比如：写个工具，让工具帮你来写


##  Hive
加入腾讯云终端团队之后，首先怼在眼前的是众多的产品线：FaceIn，CI、AI、COS、CAS.....巴拉巴拉。原先这些产品的代码都是各自为战。虽然都是iOS的SDK，除了开发者是一样的，其他的都老死不相往来。只是偶尔会有些CC+CV的沟通。针对这类问题，像大多数人一样得上***组件化***的解决方案啊。

大家按照各自的职责排排坐，上帝的归上帝，凯撒的归凯撒。网络库单独摘出来，新写的Log库也摘出来，还有其他能够各自为政的库也都摘出来。

然后使用iOS事实上的组件化工具***cocoapods***，让每个产品能够依赖并引用到自己需要的底层库。这样一个简化版的组件化方案就出来了。

只是，突然发现工作量有点大啊。每个新的组件，现在都是一个独立的git库。而一个产品则需要多个这样的git库。于是就引入了一个问题：多git库的管理。

或许你会问，按照cocoapods的模式，直接把底层库发布不久的了吗。干嘛要用git引入啊？你不知道，我们每个库都在开发，随时都有可能改变。改变了就需要提交啊。

同一时间管理多个git库，手疼。得每个git库去查看git status，去git add ....巴拉巴拉。敲键盘敲的手疼🤦‍♂️。于是继续寻找工具，这个时候我看上了android家的repo。一个多git库管理工具，Android的源码就是用这个在管理。而且看起来也不错。那么就引入吧。一下子多git库管理的问题得到了改善。

但是当我把repo+cocoapods两个工具整合在一起使用的时候，还是觉得不爽，还是太费劲。我连每次去git.code.oa.com上去创建个工程都觉得是浪费时间。

> 要想偷懒就得把功夫花在事情


于是就创建了工具[Hive](http://git.code.oa.com/qcloud-terminal/Hive)--iOS组件化管理ToolKit。把所有做了三次以上的事情，都封装在这个工具里面。将和iOS组件话相关的事情，能流程化的都变成工具。让下次再做同样的事情的时候，不用敲好多代码，只用一个命令就OK了。在Hive里面完成了工程项目的初始化和配置、组件的增删改查、Demo等产品化的增删改、还有创建基于Merge-Request的CodeReview、批量打包的事情。甚至和git.code.oa.com打通，比如在创建一个新的组件的时候，会去git.code上检查组件对应的gitrepo是否存在，不存在就新建，存在就简单的依赖一下。



##  Chameleon


