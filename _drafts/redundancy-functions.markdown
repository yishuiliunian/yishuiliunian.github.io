---
layout: post
title: "iOS架构设计之冗余性思考"
date: 2017-02-09T13:15:02+08:00
categories: iOS
---




##iOS架构设计之"冗余性"思考

做客户端开发的同学都知道业务需求千变万化，你永远不知道他未来会变化成什么样子。而作为开发人员也绝对不喜欢需求变更。本来说好的，都快做完了，产品经理变卦了：咱们不这样搞了，你看我七十二变。

我们极不情愿跟着这纷繁复杂的变化，而疲于奔命。天下没有那么容易偷的懒，若不想应对这变化。就需要走到变化前面。技术往前走一步，领先于业务，而不是被业务赶着屁股走。这就需要冗余性思考，在做业务开发的时候，作为Coder就需要往后思考，业务可能会怎么变，当前程序结构是否足够灵活能方便调整，当业务需求调整的时候，能够以最小的代价来满足。而这就是『冗余性』思考。

> 针对变化进行设计而不只是针对需求。

这里说是『冗余』，是因为开发测多想了几步，为未来可能的变化也做了铺垫。与一些同学坚持的程序设计满足当前需求，不进行过度设计的理念多少有些不符。而我认为进满足当前需求进行设计是传统软件开发的路数，在互联网软件开发过程中，已经不适用。互联网软件产品，尤其是终端上的，版本迭代频繁，功能更新迅疾。已经很难有稳定的需求存在，变化是其本质特征。于是要求我们在开发的时候，就需要针对这种变化做出一定的设计。



## 探寻变化的规律
### 设计机制而不是仅仅满足需求 

> 机制与策略分离

我们首先要说一个观点就是机制与策略分离。我们希望设计的是一整套能够满足上述要求的协议，其次才是实现，最后才是在我们的APP中的具体应用。这也是我这一年来的一个非常重要的总结。并且在逐渐开源出来的一些库中也体现着这个设计。具体说一下，所谓机制即是抽象出来的规则,比如:

~~~
f(x)=x^2 x属于R
~~~

所谓策略即是在具体场景中的应用，比如当x=2的时候:

~~~
f(2)=4 x=2
~~~

协议是问题解决方案的描述，或者说要解决这个问题大家都应该遵守的规则。就像网络的tcp协议，你要基于tcp通信你就需要遵循这个协议。协议是对边变化规律的固话。而不同的环境中的实现则是变化。

实现是针对于某类环境的实施方案，比如linux上对于TCP的实现还有windows上对于TCP的实现。虽然都是一个协议，但是大家的实现方式不一样，有基于c写的，有基于c++写的。

而应用是真对具体的问题域提出的实施方案，比如我们做了一个哟呵校园的聊天软件使用了tcp进行socket通信。tcp的实现在这里也是我们整个技术栈中对于变化的部分的固化，而我们的应用软件则是那个变化。




### 预置

### 交互性

### 可运营

## 几个Trick的针对变化的设计

### 功能提前量

### 命令式缓存

在我们构建了服务器与客户端命令式交互的架构（服务器向客户端发送指令，执行特定的动作）之后，我们做了一些有意思的事情。就比如命令式缓存：服务器向客户端下发文件缓存指令，客户端收到指令后进行文件缓存操作。

这套简单的系统构建起来之后，我们在这上面做了很多有意思的事情。

#### 利用预缓存减小安全包体积

界面开发中往往用到很多的图片资源，尤其是PNG格式的资源，虽然可以进行压缩，但是某些尺寸比较大的北京资源图片还是可能会达到上百KB。这对于一个ipa包来说，也是举足轻重了。

最开始，可能为了包体积，我们牺牲了用户体验。对于这样的图片使用网络资源。这样就很难保证用户跳转到界面的时候，能够第一时间看到正确的背景图片。甚至有些网络差的时候，图片压根就下载不下来。


于是，我们做了这样的设计：

1. 2.1版本将引入A，B，C三张大体积的图片
2. 在2.1版本没有发布之前，就向全量客户端下发预缓存指令：缓存A，B，C三张图片。
3. 然后发布2.1版本，用户升级之后进入对应页面时，将直接从本地缓存中读取对应的图片进行展示。

这样即兼顾了用户体验也减小了包体积。

#### 利用预缓存减少CDN压力

在活动运营的时候，尤其是重大的节假日，一旦活动发布之后的段时间内，用户访问量激增，将会导致CDN过载。大量用户初次访问页面，大量下载文件资源。这个时候，就完全可以在活动之前，下发预缓存指令，来缓解CDN过载的问题。 

### 可运营客户端