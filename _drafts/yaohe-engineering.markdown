---
layout: post
title: "Yaohe-engineering"
date: 2016-08-09T16:44:58+08:00
categories: iOS,吆喝
---


有序构建 吆喝的iOS端的诞生
===

这将会是一些列文章的开端，用业余时间构建了一个聊天APP。编写的同时，也在思考和实践如何构建一个还算靠谱的APP。当然我们这里只是探讨一下技术层面的东西。关于产品层面和商业层面的思考也会有所涉及，但是会少一些。

什么是靠谱的APP？这里可能会有很多层面的思考。

1. 技术层面，如何构建这个APP的，这个APP的代码质量和运行质量以及服务质量是否满足用户的对一个APP的基本的质量诉求。
2. 产品层面，APP的基础业务逻辑以及交互等等，是否解决了用户的痛点或者满足了用户诉求。
3. 商业层面，好东西也必须得有赚钱的能力，这样是可持续的发展。当然商业上的靠谱，赚钱只是一方面，更重要的是能够产生价值。所谓商业靠谱，也就是能够持续的产生被需要的价值的能力。

三个层面的东西相辅相成。但是技术靠谱，貌似是其他两个的基础。一个只有空想的产品和商业模式的东西，只能是个PPT。而对用户产生不了真实的价值。而且，做为技术人员，当然登说，技术是核心基础了，哈哈。

先抛开产品层面和商业层面的东西，我们探讨一下如何构建一个技术层面靠谱的APP。首先我们需要确定的是一个靠谱APP应当有什么样的外在表现，也就是指标。定量分析相对的可信度较高啊。BUT，然而有些东西比较难定量，比如用户对某个功能的喜好程度。这个则是个定性的问题。定量分析和定性分析相结合才能得出一个比较靠谱的指标。

先抛出一些大家比较常见的评价指标：

|指标|含义|所属范围|
|:--|:--|:--|
|需求完成度|是否忠实的还原了最开的产品设计|基础开发|
|功能完整性|在正常的业务流程下，是否无错误逻辑出现|基础开发|
|功能稳定性|在异常的业务Case下，是否能够正常处理|基础开发|
|页面完成度|是否忠实的还原了UI和UEX同学的界面设计|基础开发|
|完成耗时|是否在规定的时间内完成了开发|基础开发|
|耗电|APP在正常使用情况下的平均耗电水平|质量约束|
|CPU利用率|APP在正常，低频，CPU密集各情况下的CPU消耗|质量约束|
|内存占用|APP在启动，正常使用，关键业务等情况下的内存消耗|质量约束|
|页面渲染速度|单个页面从LoadView到ViewDidAppear的耗时|质量约束|
|页面流畅|关键页面的FPS（帧率）|质量约束|
|Crash率|Crash发生比率|质量约束|
|代码质量|代码可维护性和可扩展性，以及可读性|质量约束|
|...|...|...|



我们将这些指标分成了两类：基础开发和质量约束。这个是延续"Make it work,Keep it simple"的设计哲学。开发第一步是能够让这个APP先跑起来，Work起来。这就像盖房子打地基一样。只有一个能够能够Work的基础，我们才能在这个的基础上去满足各种质量约束。一步一步的让APP更加靠谱起来。那么接下来的文章，也会分成两大主题：

1. Make it Work，有序的构建一个APP的基础架构，还原业务逻辑
2. Keep it simple, 进一步优化满足特殊的质量约束。


## 核心架构与框架

> 话说天下大势，分久必合，合久必分

So，let's make it work。开始构建一个APP能够跑起来的基础的。第一步，进行技术选型。处理几个比较核心的问题。

首先，确定使用哪个技术栈。用Swift还是用OC？我使用了OC，因为OC比较熟悉，Swift还能学习，这里可能会拖慢工程进度。是使用Hybird还是Native，还是中间的RN。因为要做的是社交类的应用，用户体验还是非常核心的一个指标，同时考虑到学习成本等问题，最终还是选择了使用Native的方式。而且之前积累的一些『组件』，也能够排的上用场，省的重复造轮子了。

然后，就是确定使用哪种具体的架构模式了。可选的有MVVM，MVC，MVP、VIPER、FLUX.....
 





满足特定模型的编程约束
性能 ，耗电，内存占用，IO，页面渲染速度
运行时状态  crash率
代码质量
工程效率 （可维护性，可扩展性）
