<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>一水的技术博客</title>
    <link>http://dzpqzb.com</link>
    <description>iOS开发者，讲述一些关于OC、iOS、设计模式和架构的故事。欢迎关注微信公共账号IOS_Tips</description>
    
      <item>
        <title>iOS开发知识框架</title>
        <link>http://dzpqzb.com/2015/11/27/zhishikuangjia.html</link>
        <guid isPermaLink="true">http://dzpqzb.com/2015/11/27/zhishikuangjia.html</guid>
        <pubDate>Fri, 27 Nov 2015 22:39:11 +0800</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/7df22103jw1eyfwulrmn3j21ay3nihd3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>Bitcode适配指南</title>
        <link>http://dzpqzb.com/2015/11/19/bitcode-open.html</link>
        <guid isPermaLink="true">http://dzpqzb.com/2015/11/19/bitcode-open.html</guid>
        <pubDate>Thu, 19 Nov 2015 19:41:34 +0800</pubDate>
        <description>&lt;p&gt;随着XCode7的发布，Apple提供了一项新的技术来支持App瘦身功能，那就是Bitcode。本文章将会结合自己在支持bitcode过程中遇到的问题，来阐述支持bitcode的过程。&lt;/p&gt;

&lt;h2 id=&quot;bitcode&quot;&gt;BitCode是什么&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Bitcode is an intermediate representation of a compiled program. Apps you upload to iTunes Connect that contain bitcode will be compiled and linked on the store. Including bitcode will allow Apple to re-optimize your app binary in the future without the need to submit a new version of your app to the store.

Xcode hides symbols generated during build time by default, so they are not readable by Apple. Only if you choose to include symbols when uploading your app to iTunes Connect would the symbols be sent to Apple. You must include symbols to receive crash reports from Apple.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上述引自Apple的文档&lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html#//apple_ref/doc/uid/TP40012582-CH35&quot;&gt;App Thinning (iOS, tvOS, watchOS)&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;其大概意思是Bitcode类似于一个中间码，被上传到applestore之后，苹果会根据下载应用的用户的手机指令集类型生成只有该指令集的二进制，进行下发。从而达到精简安装包体积的目的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/7df22103jw1ey79g6evsij20kb08rmxg.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;一点编译原理&lt;/h3&gt;

&lt;p&gt;为了更好的理解什么是bitcode，我们简短的看一下编译器编译的过程：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Lexer&lt;/strong&gt; :读入源文件，并将其转化成字符流&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Parser&lt;/strong&gt; :将字符流转换成&lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;AST&lt;/a&gt;（抽象语法树）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Semantic Analysis&lt;/strong&gt;: 对输入的AST进行语法检查。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Code Generation&lt;/strong&gt;: 代码生成，将AST转换成低层次的IR指令&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Optimization&lt;/strong&gt;: 分析IR指令，将其中潜在会拖慢运行速度的指令干掉。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AsmPrinter&lt;/strong&gt;: 通过IR（中间码）生成特定CPU架构的汇编代码&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Assemble&lt;/strong&gt;: 将汇编代码转化成二进制&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Linker&lt;/strong&gt;: 通常程序会引用其他的二进制文件（.a或者framework)，但是这些链接在程序中没有正确的地址，只是个占位符。Linker的工作就是给这些占位符正确的地址。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;更多信息可以参考：&lt;a href=&quot;https://www.objc.io/issues/6-build-tools/compiler/&quot;&gt;The Compiler&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一般情况下，在真实的编译器构架那种，会将上述过程分成前端和后端两部分来处理：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/7df22103jw1eyd62a1opyj21f816sn5d.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在前后端之间传递的就是IR（中间码），而bitcode就是一种特殊形式的中间码。原本前后端的工作都是在本地LLVM中完成，虽然Apple没有给出具体的Bitcode实现，但是通过他们的文档可以猜测，是将一部分后端的工作移到了服务器进行。从Xcode上传IR到服务器，服务器来真对不同的机型进行后续操作。从而达到真对不同机型生成对应指令集的二进制，而减小报体积的目的。&lt;/p&gt;

&lt;h2 id=&quot;bitcode-1&quot;&gt;打开bitcode设置&lt;/h2&gt;

&lt;p&gt;实际上在Xcode 7中，我们新建一个iOS程序时，bitcode选项默认是设置为YES的。我们可以在”Build Settings”-&amp;gt;”Enable Bitcode”选项中看到这个设置。&lt;/p&gt;

&lt;p&gt;不过，我们现在需要考虑的是三个平台：iOS，Mac OS，watchOS。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;对应iOS，bitcode是可选的。&lt;/li&gt;
  &lt;li&gt;对于watchOS，bitcode是必须的。&lt;/li&gt;
  &lt;li&gt;Mac OS不支持bitcode。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果我们开启了bitcode，在提交包时，下面这个界面也会有个bitcode选项：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/7df22103jw1ey79j7ofbzj20lm0awmz1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是如果其中包含第三方库，不支持bitcode时候。需要将”Enable BitCode”设置成NO。而且这个选项是，只要有一个第三方库不支持，就不能开的。否则连接错误。&lt;/p&gt;

&lt;h2 id=&quot;fembed-bitcode-fembed-bitcode-maker&quot;&gt;确保打包的时候使用的是&lt;code&gt;fembed-bitcode&lt;/code&gt;, 而不是&lt;code&gt;fembed-bitcode-maker&lt;/code&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;You should be aware that a normal build with the -fembed-bitcode-marker option will produce minimal size embedded bitcode sections without any real content. This is done as a way of testing the bitcode-related aspects of your build without slowing down the build process. The actual bitcode content is included when you do an Archive build.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;fembed-bitcode-maker&lt;/code&gt;:只是简单的标记一下在archive出来的二进制中bitcdoe所在的位置。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;fembed-bitcode&lt;/code&gt;: 真的会生成bitcode指令，并且嵌入到二进制中，这个设置不止要在app中设置，同样你也必须在编译静态链接库的时候使用。而且需要主题的是&lt;strong&gt;该参数系统只默认在archive模式下会添加&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;需要注意的是bitcode只默认在archive下编译。在debug和release下并不会。&lt;/p&gt;

&lt;p&gt;如果您开发的是app那么走正常的打包archive流程就好了。如果你正在开发.a静态库或者framework，请注意打包方式设置为archive,或者在打包脚本中加入-fembed-bitcode参数。如果需要的话，需要在Build Settings中打开 DEPLOYMENT_POSTPROCESSING=YES，设置Strip Style为debugging。&lt;/p&gt;

&lt;h2 id=&quot;bitcode-2&quot;&gt;检测是否打开Bitcode&lt;/h2&gt;

&lt;p&gt;当打开bitcdoe选项之后，我们可以使用otool工具来检查二进制文件中是否包含bitcode段。&lt;/p&gt;

&lt;h3 id=&quot;a&quot;&gt;针对于静态链接库.a文件&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;otool -arch armv7 -l xxxx.a | grep __bitcode | wc -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果是当前库支持.a文件则会输出一个数字&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/7df22103jw1ey7d1wkb9aj21a7032gmo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果不支持bitcode则不会出现该数字。&lt;/p&gt;

&lt;p&gt;上述命令只检查了armv7架构，同时，也必须使用改指令检查其他的指令集是否包含bitcode如：arm64，armv7s等等&lt;/p&gt;

&lt;h3 id=&quot;appframeworkbitcode&quot;&gt;检查app或者framework中是否包含bitcode&lt;/h3&gt;

&lt;p&gt;由于app中二进制和framework中二进制文件与.a文件存在差异，因为需要检查的是__LLVM段，当出现该段的时候，则表示支持bitcdoe，否则不支持。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;otool -l xxxx | grep __LLVM | wc -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里otool有个bug，当你的framework使用过lipo命令，进行拆解和合并之后，需要指定指令集进行检查才可以。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;otool -arch armv7 -l xxxx | grep __LLVM | wc -l
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;BUT, 上述检查过了之后，也不一定是真的支持bitcode，在实际的测试中，发现上述检测命令通过之后，某个使用的第三方库，依然报错不支持bitcode。因而最终结果，还是需要以是否能够连接成功为准。重要事情说三遍，上述网上流传的检测方法只做参考，最终还是要以实际效果为准。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-1&quot;&gt;最终结果检查&lt;/h3&gt;

&lt;p&gt;如果您是一个APP，可以直接进行Archive打包，如果是一个库，则建议建一个Demo工程进行打包，记得要打开bitcode设置。&lt;/p&gt;

&lt;h4 id=&quot;checkpoint1--&quot;&gt;CheckPoint1  连接是否报错&lt;/h4&gt;

&lt;p&gt;如果有任何一个库没有打开bitcode链接，将会出现类似下方的错误。只要链接过了，那么恭喜了，基本上是OK了。
&lt;img src=&quot;http://ww4.sinaimg.cn/large/7df22103jw1eyc7gbmexbj21fy04o7as.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;checkpoint2-&quot;&gt;CheckPoint2 检查最终效果&lt;/h4&gt;

&lt;h5 id=&quot;ipa&quot;&gt;使用开发模式导出ipa&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/7df22103jw1eyc7nexdfbj206t07qmxo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/7df22103jw1eyc7o22jrtj20g409qmyv.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;section-2&quot;&gt;选择出包的方式&lt;/h5&gt;

&lt;p&gt;这里建议使用第二种，生成真对具体机型的包&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/7df22103jw1eyc7occxdqj20g409q408.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;compiling-bitcode&quot;&gt;出现了，Compiling Bitcode，这个过程！！！！！&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/7df22103jw1eyc7pqgxolj20g409q3ys.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;section-3&quot;&gt;最终结果&lt;/h5&gt;

&lt;p&gt;在最后输出的文件中，你能够看到一个App Thinning的结果，里面有针对各个机型的ipa包。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/7df22103jw1eyc7r9u55sj20b809575p.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在App Thinning Size Report中能够明显看到，由于使用了bitcode等技术之后，所带来的收益：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
App Thinning Size Report for All Variants of Black

Variant: Black-iPad (4th generation)-etc.ipa
Supported devices: iPad (3rd generation) and iPad (4th generation)
App + On Demand Resources size: 368 KB compressed, 737 KB uncompressed
App size: 368 KB compressed, 737 KB uncompressed
On Demand Resources size: Zero KB compressed, Zero KB uncompressed
....
&lt;/code&gt;&lt;/pre&gt;
</description>
      </item>
    
      <item>
        <title>是怎样干掉支付宝的界面的</title>
        <link>http://dzpqzb.com/2015/11/17/kill-alipay.html</link>
        <guid isPermaLink="true">http://dzpqzb.com/2015/11/17/kill-alipay.html</guid>
        <pubDate>Tue, 17 Nov 2015 22:25:03 +0800</pubDate>
        <description>&lt;p&gt;这边的产品需求，需要在某些场景下进行清场操作，将所有的ViewController堆栈清空，页面回滚到首页。我们内部的页面都能够完成这个操作。但是有些第三方的页面，怎么都搞不掉。比如支付宝的页面。因为是引入的SDK，没有代码，所以第一方案，向支付宝侧提出需求，要求提供一个函数接口，能够清退他们的界面，但是他们说不能满足该需求。所以，我们只能开始了黑科技之旅。&lt;/p&gt;

&lt;h2 id=&quot;view&quot;&gt;首先寻找支付宝的View&lt;/h2&gt;

&lt;p&gt;因为我们的目标是干掉支付宝SDK自己弹出来的页面，那么我们第一件事情就是找到该页面。我们使用Xcode7.1的视图查看功能，找到了支付宝的View：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/7df22103jw1ey5jykdse8j20b80a0dh4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一个叫做APayH5WebViewProgressView的东西，一看就是支付宝WebView上的进度条。他的父View是个UIView，很明显这个是某个UIViewController的根view。而且这个View很奇怪的是直接加载了Window上面。好霸道！！！怪不得我们的界面都被盖住了。&lt;/p&gt;

&lt;p&gt;也就是说现在我们只要把这个VC的view给remove掉就可以干掉支付宝的霸道的页面了。而现在这个页面没有什么特异性的信息。但是可以推理那个UIViewController一定是某个特殊的类，自有其类名。而且因为是直接addSubView在keywindow上的，则必然在某个地方会持有该VC的实例。发现支付宝的AlipaySDK是个单例，这可是个常驻内存的东西。如果什么东西要被持有的话，肯定和他脱不了干系。要不看看这个类的实例变量吧。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
- (void) printClassIVar:(NSString*)name
{
    unsigned int count ;
    Ivar *list = class_copyIvarList(NSClassFromString(name), &amp;amp;count);
    for (int i = 0; i &amp;lt; count; i++) {
        Ivar p = *list;
        const char* name = ivar_getName(p);
        NSLog(@&quot;name is %s \t  type is  %s&quot;, name, ivar_getTypeEncoding(p));
        list++;
    }
}
- (void) testAlipay
{
    [self printClassIVar:@&quot;AlipaySDK&quot;];
//
//    id value = [[AlipaySDK defaultService] valueForKey:@&quot;bizContext&quot;];
//    

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
 name is _schemeStr        type is  @&quot;NSString&quot;
 name is _executingOrderStr        type is  @&quot;NSString&quot;
 name is _completionBlock          type is  @?
 name is _route    type is  @&quot;APayRoute&quot;
 name is _processor        type is  @&quot;APayProcessor&quot;
 name is _alertOkAction    type is  @&quot;NSDictionary&quot;
 name is _alertCancelAction        type is  @&quot;NSDictionary&quot;
 name is _bizContext       type is  @&quot;APayBizContext&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看到AlipaySDK这个单例持有的变量实例中有几个比较特殊：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;APayRoute&lt;/li&gt;
  &lt;li&gt;APayBizContext&lt;/li&gt;
  &lt;li&gt;APayProcessor&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这三个类一看就是支付宝的类，我们用上面类似的方法，查看这三个类的属性变量，就真的发现了一个webViewController。&lt;/p&gt;

&lt;p&gt;APayRoute的属性变量结构：
~~~
 name is _infostr          type is  @”nsstring”
 name is _schemestr        type is  @”nsstring”
 name is _resultblock      type is  @?
 name is _wapviewcontroller        type is
~~~&lt;/p&gt;

&lt;p&gt;没错就是那个wapviewcontroller。不管怎样我们找到这个VC了。那么剩下的就是干掉他了。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;删掉界面&lt;/h2&gt;

&lt;p&gt;其实就是从AlipaySDK的单例这段内存开始，一直往下找实例。直到找到这个VC为止。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    id cla = NSClassFromString(@&quot;AlipaySDK&quot;);
    if ([cla respondsToSelector:@selector(defaultService)]) {
        id defaultService = [cla performSelector:@selector(defaultService)];
        id value = [defaultService valueForKey:@&quot;route&quot;];
        if ([value isKindOfClass:NSClassFromString(@&quot;APayRoute&quot;)]) {
            if ([value respondsToSelector:@selector(wapViewController)]) {
                UIViewController* vc = [value performSelector:@selector(wapViewController)];
                if (vc) {
                    [vc.view removeFromSuperview];
                }
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后直接用removeFromSuperview删掉这个霸道的页面。&lt;/p&gt;

&lt;p&gt;-&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Block使用的陷阱</title>
        <link>http://dzpqzb.com/2015/11/17/block-usage.html</link>
        <guid isPermaLink="true">http://dzpqzb.com/2015/11/17/block-usage.html</guid>
        <pubDate>Tue, 17 Nov 2015 12:16:47 +0800</pubDate>
        <description>&lt;p&gt;使用block的使用，一定要考虑到对象的生命周期，block会延长对象的生命，延迟释放，由此可能会造成逻辑上时序的问题。我自己在使用的时候命中了这样的一个问题，因为对象延迟释放导致逻辑有问题。block的时候留意一下。&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>什么时候该使用枚举类型</title>
        <link>http://dzpqzb.com/2015/11/12/emun-usage-when-and-how.html</link>
        <guid isPermaLink="true">http://dzpqzb.com/2015/11/12/emun-usage-when-and-how.html</guid>
        <pubDate>Thu, 12 Nov 2015 16:34:02 +0800</pubDate>
        <description>&lt;p&gt;&lt;strong&gt;在值可穷尽的情况下可使用枚举类型&lt;/strong&gt;
当场景能够全覆盖的时候才使用枚举类型，比如付款状态：付款前，付款中，付款后，中前后三个状态能够覆盖所有付款的时间场景。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;值在不可穷尽的情况下不适合使用枚举。请考虑其他方式或者设计模式来解决当前问题&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;而付款失败的种类，则不适合使用枚举类型，因为枚举无法覆盖全量的失败场景，在1.0版本的时候可能只有2，3，5这几种失败code，到了2.0的时候又多了6，8，9，。。。。如此类推，你会面临着不停的往这个枚举中添加新的值的窘境。而且在处理这个枚举的switch-case语句也会不断的膨胀，带来维护灾难。&lt;/p&gt;

&lt;p&gt;而我们在使用枚举的时候，通常会伴随着switch-case这种变形的if语句，通常当一个if语句嵌套超过3层的时候，就考虑一下这里是否存在问题了。于是我们我们使用枚举加switch-case来判断场景的情况。也是值得商榷的。&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>OC中使用defer操作</title>
        <link>http://dzpqzb.com/2015/11/11/defer-ios-caozuo.html</link>
        <guid isPermaLink="true">http://dzpqzb.com/2015/11/11/defer-ios-caozuo.html</guid>
        <pubDate>Wed, 11 Nov 2015 21:32:15 +0800</pubDate>
        <description>&lt;p&gt;类似于 golang的defer  将一个操作延迟到作用域结束的时候 执行：常见于 关闭文件等。。。。这是异常处理的一种替代方案。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define DEFER(block) __unused OCDefer* defer___ = [[OCDefer alloc] initWithBlock:block];

typedef void(^OCDeferBlock)(void);

@interface OCDefer : NSObject

- (instancetype) initWithBlock:(OCDeferBlock)block;

@end

@interface OCDefer ()

{

    OCDeferBlock _block;

}

@end

@implementation OCDefer

- (instancetype) initWithBlock:(OCDeferBlock)block

{

    self = [super init];

    if (!self) {

        return self;

    }


    _block = block;

    return self;

}

- (void) dealloc

{

    if (_block) {

        _block();

    }

    _block = nil;

}

@end

//测试的例子

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions

{


    FILE* file = fopen(&quot;/afile.txt&quot;, &quot;r&quot;);

    DEFER(^{

        NSLog(@&quot;hello&quot;);

        fclose(file);

    });


    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];

    // Override point for customization after application launch.

    self.window.backgroundColor = [UIColor whiteColor];

    [self.window makeKeyAndVisible];

    return YES;

}

&lt;/code&gt;&lt;/pre&gt;
</description>
      </item>
    
      <item>
        <title>使用宏来减少代码重复</title>
        <link>http://dzpqzb.com/2015/11/11/macro-defines.html</link>
        <guid isPermaLink="true">http://dzpqzb.com/2015/11/11/macro-defines.html</guid>
        <pubDate>Wed, 11 Nov 2015 21:14:06 +0800</pubDate>
        <description>&lt;p&gt;使用宏定义来简化输入，提高输入的效率。同时提高输入准确性。&lt;/p&gt;

&lt;p&gt;案例一 属性定义 @property&lt;/p&gt;

&lt;p&gt;我们在定义一个类的属性的时候，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface TestObject : NSObject

@property (strong, nonatomic) NSString* title;

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最起码要输入5个单词，四个符号和多个空格。写多了就会觉得这里重复输入的地方太多，为什么不想个办法优化一下输入呢。而且有些时候，中间的某个单词比如strong拼错了，还得会过头来继续修改。 优化输入效率，有很多种方式。比如使用sinepts。而且xcode的snip支持也不错。直接拖拽代码块就能够生成snip。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\\key is

\\@propertystrongnonatomic

@property (strong, nonatomic) &amp;lt;#type#&amp;gt;* &amp;lt;#name#&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样的确是可以，但是你需要定义大量的snip来适应不同的定义peroperty的情况。那有没有更简单的一点的方法呢。必须有啊，使用宏啊。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define DEFINE_PROPERTY(mnmKind, type , name)       @property (nonatomic, mnmKind)  type  name

#define DEFINE_PROPERTY_ASSIGN(type, name)          DEFINE_PROPERTY(assign, type, name)

#define DEFINE_PROPERTY_ASSIGN_Double(name) DEFINE_PROPERTY_ASSIGN(double, name)

#define DEFINE_PROPERTY_STRONG(type, name) DEFINE_PROPERTY(strong, type, name)

#define DEFINE_PROPERTY_STRONG_NSString(name) DEFINE_PROPERTY_STRONG(NSString*, name)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体参见DZProgrameDefines 我们完全可以通过使用宏定义，来扩展出一些列的定义属性的宏方法，借助于XCode的强大的自动补全来方便我们输入，少敲了非常多的字符。并且还减少了出错的情况，在可读性上，如果宏定义的名字起得好，可读性也不错。&lt;/p&gt;

&lt;p&gt;同时，不得不说的一点是我们借助于这种宏定义的方式，还规范和统一了定义属性的格式，方便维护同一个工程的多个同事修改同一份代码。让他们的代码质量能够保持在一个比较整齐的水平。 这种&lt;/p&gt;

&lt;p&gt;代码模板&lt;/p&gt;

&lt;p&gt;某些情况下，我们可能会写一些大量的重复代码，而这些代码又很难将其抽离出来做成一个独立的函数（甚至是lambda表达式），而这种时候宏的作用就体现出来了。考虑下述情况：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSString* a = infos[@&quot;aKey&quot;];

if(!a) {

    [self postError:@&quot;need aKey&quot;];

    return;

}

NSString* b = infos[@&quot;bKey&quot;];

if(!b) {

    [self postError:@&quot;need bKey&quot;];

    return;

}

....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上述代码中，我们需要从字典infos中取一批参数并且要判断这些参数是否为空，为空的时候报错并返回。其中有大量的代码是重复的。而这种重复又不太适合抽离成函数那么这个时候就可以这样做了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define GetValueWithLocalNameAndKey(name , key) \

\

NSString* name = [infos getWBValueForKey:key error:&amp;amp;error];\

if (!error) { [self postPayError:error]; return;}\

\

...

GetValueWithLocalNameAndKey(a,aKey);

GetValueWithLocalNameAndKey(b,bKey);

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样做的时候，就将一段代码抽离成了模板。方便了使用和维护。&lt;/p&gt;

&lt;p&gt;-&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>ARC的一些细节之NSError的使用</title>
        <link>http://dzpqzb.com/2015/11/11/arc-error.html</link>
        <guid isPermaLink="true">http://dzpqzb.com/2015/11/11/arc-error.html</guid>
        <pubDate>Wed, 11 Nov 2015 21:10:40 +0800</pubDate>
        <description>&lt;p&gt;首先看一下这段代码会输出一些什么：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSError* error;
NSError** errPtr = &amp;amp;error;
NSLog(@&quot;%x&quot;,errPtr);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你认为，能够输出error的地址的话，也是情有可原的。但是，实际情况是：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/7df22103jw1exxcepvhjrj20fk00zt8r.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;编译器直接报错，编译都不通过，也就谈不上运行输出结果了。为什么会这样呢？&lt;/p&gt;

&lt;p&gt;在ARC下每个变量都有一个所有权修饰符默认是__strong，而在定义OC对象的指针变量的时候，需要注意其所有权修饰符需要与其所指向的对象的所有权修饰符保持一致。于是上面的代码需要改成这个样子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    NSError* error;
    NSError* __strong * errPtr = &amp;amp;error;
    NSLog(@&quot;%x&quot;,errPtr);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;看到这你也许会问，经常遇到到使用NSError来返回错误信息的函数，比如:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (BOOL)verifyPassword:(NSString *)inPassword error:(NSError **)outError
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为什么调用他的时候没有报错呢？&lt;/p&gt;

&lt;p&gt;因为在函数使用的时候，会默认的将outError的所有权变成__autoreleasing.并且在调用函数之前编译器回补齐一个临时变量，从而达到了所有权修饰符保持一致的效果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (BOOL)verifyPassword:(NSString *)inPassword error:(NSError *__autoreleasing*)outError {
    ....
}
....
{
    NSError __strong* error;
    NSError __autoreleasing* tmp = error;
    [anObject verifyPassword:@&quot;a&quot; error:&amp;amp;tmp];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个问题，在使用NSError或者使用指针在ARC下进行数据传递的时候，需要注意和小心。&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>MAC下面提高工作效率的一些非常好用的工具</title>
        <link>http://dzpqzb.com/2015/11/11/tools-for-program.html</link>
        <guid isPermaLink="true">http://dzpqzb.com/2015/11/11/tools-for-program.html</guid>
        <pubDate>Wed, 11 Nov 2015 21:05:51 +0800</pubDate>
        <description>&lt;p&gt;编程相关：&lt;/p&gt;

&lt;p&gt;xcode（oc的神奇，ios编程必备，并且支持多种语言，写c++/c什么的都可以）&lt;/p&gt;

&lt;p&gt;Code2 （界面简单，写网页，js可以考虑）&lt;/p&gt;

&lt;p&gt;Prototyper（原型设计软件，可以说是现在原型设计软件中真对移动端开发优化的最好的，最强大的是他能设计动画，让原型不再只是一张张页面。）&lt;/p&gt;

&lt;p&gt;MesaSQLite（查看SQLite文件的利器，调试sqlite时必备）&lt;/p&gt;

&lt;p&gt;Sketch（现在都到3了，比PS轻巧方便，对于我这样没有美术功底的人来说，都能用它来给ios抠图了，哈哈）&lt;/p&gt;

&lt;p&gt;编辑器和排版：&lt;/p&gt;

&lt;p&gt;Sublim Text2/3 (在textmate好长时间不更新之后，mac上目前最好的编辑器，经过扩展后，可编程一个IDE。其插件机制让他无所不能，什么VIM模式了，语法高亮了，，，，都OK)&lt;/p&gt;

&lt;p&gt;Atom（Github推出的基于浏览器建构的编辑器，简单试用了一下，和Sublim的感觉差不多，但是在很多细节处理上优于Sublim，只是现在还在开发中，非常期待其完成版）&lt;/p&gt;

&lt;p&gt;Latex+Textmake+lyx(所想即所得的排版工具，尤其是写数学公式极其漂亮，缺点是入门门槛有点高，但是一旦学会绝对可以伪装自己成文艺青年。大神Knuth出品，没有更好只有最好)&lt;/p&gt;

&lt;p&gt;Markdown+Mou（简单的编辑和排版工具，一般情况下的任务都可以胜任，而且学习门槛低，非常易用。那个，自从用了markdown好久没有用latex了。）&lt;/p&gt;

&lt;p&gt;OmmWriter（文艺青年必备，让打字成为一种享受）&lt;/p&gt;

&lt;p&gt;Google Docs 大家一起编辑同一个文档&lt;/p&gt;

&lt;p&gt;版本控制：&lt;/p&gt;

&lt;p&gt;SourceTree（Git版本控制工具，简单易用，功能强大，基本上是Mac最好的了git软件了）&lt;/p&gt;

&lt;p&gt;Cornerstone（SVN版本控制工具，一样强大）&lt;/p&gt;

&lt;p&gt;Cocoapods（ios/Mac编程中，第三方库管理，比git的submodule和svn的外部链接方便多了，ios程序员必备）&lt;/p&gt;

&lt;p&gt;脚本语言:&lt;/p&gt;

&lt;p&gt;apple script（做一些简单的自动化的时候可以使用，语法极度简单，基本和说英语没区别，上手难度比bash和python等小多了，简单了解之后，即可使用。而且很多apple程序都支持apple script调用）&lt;/p&gt;

&lt;p&gt;文档查看：&lt;/p&gt;

&lt;p&gt;Dash（mac上最好的文档查看工具，没有之一。可以通过插件嵌入到xcode，vim。。。等其他软件中，一键唤起查询。结合Alfred使用，效果更佳）&lt;/p&gt;

&lt;p&gt;终端软件：&lt;/p&gt;

&lt;p&gt;iTerm2（非常好用的终端软件，主题可以美化，直接选择字符串就能够复制。。。。）&lt;/p&gt;

&lt;p&gt;tmux（高频率使用终端的人都有一个痛，不同任务需要打开不同的窗口，往往整个屏幕上层层叠叠的铺满了串口，搞过linux的人可能知道有个awosome的平铺式窗口管理器，在一个屏幕中平铺的展示多个窗口，极大限度的利用屏幕空间，显示更多的内容，而tmux这个软件就实现了在终端中的平铺式窗口管理，简单易用，可扩展性强。）&lt;/p&gt;

&lt;p&gt;vim（大家都懂得，神器）&lt;/p&gt;

&lt;p&gt;任务管理和笔记软件：&lt;/p&gt;

&lt;p&gt;WunderList（苹果某年的最佳软件，跨平台，简单易用，界面很漂亮。简单的任务管理。）&lt;/p&gt;

&lt;p&gt;Evernote （跨平台，知识积累和管理非常好的工具）&lt;/p&gt;

&lt;p&gt;Xmind（在思维脑图领域无论哪个平台这个是最好的了吧）&lt;/p&gt;

&lt;p&gt;ReadKit（自从google reader关了之后，订阅rss看资料就全靠它了。支持各种源，简单而不失强大）&lt;/p&gt;

&lt;p&gt;系统相关：&lt;/p&gt;

&lt;p&gt;Alfred V2（替代苹果自带的spotlight，全局搜索各种东西，只有你想不到没有你搜不到，PM2.5都能搜，里面的Workflow可以用来扩展神奇的功能，只能说你用了才会知道他的好。貌似新版的MAC QQ中也集成了类似的功能，只能说既生瑜何生亮了。）&lt;/p&gt;

&lt;p&gt;ParallelDesktop(用了之后我才知道什么叫做虚拟机，奥，不对应该是硬件共享。体验流畅，使用简单。可以将Windows、linux和Mac桌面完美的无缝粘合。顺便一说，你要想在Mac上完windows游戏的话，必备)&lt;/p&gt;

&lt;p&gt;1Password（这个每个网站都要密码的年代的救世主，只需要记住一个密码，其他的密码他帮你记住。密码管理界的老大哥。）&lt;/p&gt;

&lt;p&gt;f.lux（一个小工具根据当前时间和你的位置调整屏幕色温的，保护眼睛用的，程序猿的贴心保姆）&lt;/p&gt;

&lt;p&gt;Time Out （时间提醒工具，比如半个小时告诉你一次该起来运动一下了）&lt;/p&gt;

&lt;p&gt;CleanMyMac（系统清理工具，我在128G硬盘的情况下，能够正常运行系统和编程，全指望他帮助我删除无用文件了）&lt;/p&gt;

&lt;p&gt;Chrome（浏览器，个人感觉比safari好用）&lt;/p&gt;

&lt;p&gt;干坏事必备：&lt;/p&gt;

&lt;p&gt;File Viewer（二进制文件查看，分支别人的程序和数据）&lt;/p&gt;

&lt;p&gt;iExplorer（本来是ios设备管理工具，但是能够从设备中导出别人的程序，导出之后的事情，就自己想象了）
其他：事情MAC OS很多系统自带的应用都非常好用，日历，邮件什么的能用原生的尽量用原生的。能买个正版就买个正版吧，大家改BUG都挺不容易的。&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>解决Instruments无法找到调试符号表的问题</title>
        <link>http://dzpqzb.com/2015/11/11/instruments-symbols-problem.html</link>
        <guid isPermaLink="true">http://dzpqzb.com/2015/11/11/instruments-symbols-problem.html</guid>
        <pubDate>Wed, 11 Nov 2015 20:30:53 +0800</pubDate>
        <description>&lt;p&gt;在使用Instruments中的time profile调试QQMSF的时候，发现原先有的可以定位到具体函数的功能怎么也掉不出来。Instruments只能定位到一个函数地址，没有具体的函数名。分析应该是调试符号表没有找到的问题。于是去工程设置里面找关于这个选项。有几个地方需要注意：&lt;/p&gt;

&lt;h2 id=&quot;debug-information-format&quot;&gt;1 Debug information format&lt;/h2&gt;
&lt;p&gt;这里原先的设置是DWARF，什么是DWARF，他与熟悉的dSYM文件什么关系？查了一下。
“DWARF与dSYM的关系是，DWARF是文件格式，而dSYM往往指一个单独的文件。在Xcode中如果不做特殊制定，debug information是被保存在executable文件中，可以使用dsymutil从executable中提取dSYM文件。”&lt;/p&gt;

&lt;p&gt;将选项调整为，DWARF with dSYM File，再次使用Instruments来profile发现能够定位的具体的函数名。改问题解决。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/7df22103jw1exxbpoejnhj20fk057wep.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;分析可能是Instruments工具回去读取调试目标匹配的dsym文件，而当输出调试信息格式使用dwarf时，调试信息输出在了执行文件中，没有输出到dsym文件中，导致Instruments工具无法读取dsym文件，找不到符号表，结果就是无法定位函数名了。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;2、编译优化选项&lt;/h2&gt;
&lt;p&gt;在调试的时候尽量，保持零优化的模式，这样能够保证符号表的完整性。关于具体调试选项的描述可以参考gcc的文档。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/7df22103jw1exxbqjncmrj20fk0b3aaq.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>DZPullDownViewController</title>
        <link>http://dzpqzb.com/2015/11/11/dzpulldownviewcontroller.html</link>
        <guid isPermaLink="true">http://dzpqzb.com/2015/11/11/dzpulldownviewcontroller.html</guid>
        <pubDate>Wed, 11 Nov 2015 19:46:08 +0800</pubDate>
        <description>&lt;h1 id=&quot;dzpulldownviewcontrollerhttpsgithubcomyishuiliuniandzpulldownviewcontroller&quot;&gt;&lt;a href=&quot;https://github.com/yishuiliunian/DZPullDownViewController&quot;&gt;DZPullDownViewController&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;两层结构的视图控制器，下拉的时候，上层的视图滑动，显示出下层的视图。如果上层视图控制器的rootView是UIScrollView或其子类（比如UITableView），在滑到头的时候，继续往下拉，会显示出下面的视图。&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>DZCDNFiles</title>
        <link>http://dzpqzb.com/2015/11/11/dzcdnfiles.html</link>
        <guid isPermaLink="true">http://dzpqzb.com/2015/11/11/dzcdnfiles.html</guid>
        <pubDate>Wed, 11 Nov 2015 19:45:04 +0800</pubDate>
        <description>&lt;h1 id=&quot;dzcdnfiles&quot;&gt;DZCDNFiles&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/stonedong/DZCDNFiles&quot;&gt;&lt;img src=&quot;http://img.shields.io/travis/stonedong/DZCDNFiles.svg?style=flat&quot; alt=&quot;CI Status&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoadocs.org/docsets/DZCDNFiles&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/DZCDNFiles.svg?style=flat&quot; alt=&quot;Version&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoadocs.org/docsets/DZCDNFiles&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/l/DZCDNFiles.svg?style=flat&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoadocs.org/docsets/DZCDNFiles&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/p/DZCDNFiles.svg?style=flat&quot; alt=&quot;Platform&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;从CDN拉取静态文件的库&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;To run the example project, clone the repo, and run &lt;code&gt;pod install&lt;/code&gt; from the Example directory first.&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;DZCDNFiles is available through &lt;a href=&quot;http://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt;. To install
it, simply add the following line to your Podfile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod &quot;DZCDNFiles&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;author&quot;&gt;Author&lt;/h2&gt;

&lt;p&gt;stonedong, yishuiliunian@gmail.com&lt;/p&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;

&lt;p&gt;DZCDNFiles is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>MSHttpRPC</title>
        <link>http://dzpqzb.com/2015/11/11/mshttprpc.html</link>
        <guid isPermaLink="true">http://dzpqzb.com/2015/11/11/mshttprpc.html</guid>
        <pubDate>Wed, 11 Nov 2015 19:43:55 +0800</pubDate>
        <description>&lt;h1 id=&quot;mshttprpc&quot;&gt;MSHttpRPC&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/stonedong/MSHttpRPC&quot;&gt;&lt;img src=&quot;http://img.shields.io/travis/stonedong/MSHttpRPC.svg?style=flat&quot; alt=&quot;CI Status&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoapods.org/pods/MSHttpRPC&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/MSHttpRPC.svg?style=flat&quot; alt=&quot;Version&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoapods.org/pods/MSHttpRPC&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/l/MSHttpRPC.svg?style=flat&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoapods.org/pods/MSHttpRPC&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/p/MSHttpRPC.svg?style=flat&quot; alt=&quot;Platform&quot; /&gt;&lt;/a&gt;
#介绍
MSHttpRPC是一个简单基于Http的RPC框架,完成了主体的HTTP-RPC的CS交互的工作，用户可通过注册相应的关键性的Block来完成自定义的功能。已经完成了初步的RPC交互框架。
## Usage&lt;/p&gt;

&lt;p&gt;To run the example project, clone the repo, and run &lt;code&gt;pod install&lt;/code&gt; from the Example directory first.&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;MSHttpRPC is available through &lt;a href=&quot;http://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt;. To install
it, simply add the following line to your Podfile:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
pod &quot;MSHttpRPC&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;author&quot;&gt;Author&lt;/h2&gt;

&lt;p&gt;stonedong, yishuiliunian@gmail.com&lt;/p&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;

&lt;p&gt;MSHttpRPC is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>MSInputScrollViewController</title>
        <link>http://dzpqzb.com/2015/11/11/msinputscrollviewcontroller.html</link>
        <guid isPermaLink="true">http://dzpqzb.com/2015/11/11/msinputscrollviewcontroller.html</guid>
        <pubDate>Wed, 11 Nov 2015 19:42:20 +0800</pubDate>
        <description>&lt;h1 id=&quot;msinputscrollviewcontroller&quot;&gt;MSInputScrollViewController&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/stonedong/MSInputScrollViewController&quot;&gt;&lt;img src=&quot;http://img.shields.io/travis/stonedong/MSInputScrollViewController.svg?style=flat&quot; alt=&quot;CI Status&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoapods.org/pods/MSInputScrollViewController&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/MSInputScrollViewController.svg?style=flat&quot; alt=&quot;Version&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoapods.org/pods/MSInputScrollViewController&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/l/MSInputScrollViewController.svg?style=flat&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoapods.org/pods/MSInputScrollViewController&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/p/MSInputScrollViewController.svg?style=flat&quot; alt=&quot;Platform&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;To run the example project, clone the repo, and run &lt;code&gt;pod install&lt;/code&gt; from the Example directory first.&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;MSInputScrollViewController is available through &lt;a href=&quot;http://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt;. To install
it, simply add the following line to your Podfile:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
pod &quot;MSInputScrollViewController&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;author&quot;&gt;Author&lt;/h2&gt;

&lt;p&gt;stonedong, yishuiliunian@gmail.com&lt;/p&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;

&lt;p&gt;MSInputScrollViewController is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>DZCache</title>
        <link>http://dzpqzb.com/2015/11/11/dzcache.html</link>
        <guid isPermaLink="true">http://dzpqzb.com/2015/11/11/dzcache.html</guid>
        <pubDate>Wed, 11 Nov 2015 19:41:41 +0800</pubDate>
        <description>&lt;h1 id=&quot;dzcache&quot;&gt;DZCache&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/stonedong/DZCache&quot;&gt;&lt;img src=&quot;http://img.shields.io/travis/stonedong/DZCache.svg?style=flat&quot; alt=&quot;CI Status&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoadocs.org/docsets/DZCache&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/DZCache.svg?style=flat&quot; alt=&quot;Version&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoadocs.org/docsets/DZCache&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/l/DZCache.svg?style=flat&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoadocs.org/docsets/DZCache&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/p/DZCache.svg?style=flat&quot; alt=&quot;Platform&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;To run the example project, clone the repo, and run &lt;code&gt;pod install&lt;/code&gt; from the Example directory first.&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;DZCache is available through &lt;a href=&quot;http://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt;. To install
it, simply add the following line to your Podfile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod &quot;DZCache&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;author&quot;&gt;Author&lt;/h2&gt;

&lt;p&gt;stonedong, yishuiliunian@gmail.com&lt;/p&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;

&lt;p&gt;DZCache is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>DZSinglonFactory</title>
        <link>http://dzpqzb.com/2015/11/11/dzsinglonfactory.html</link>
        <guid isPermaLink="true">http://dzpqzb.com/2015/11/11/dzsinglonfactory.html</guid>
        <pubDate>Wed, 11 Nov 2015 19:40:39 +0800</pubDate>
        <description>&lt;h1 id=&quot;dzsinglonfactory&quot;&gt;DZSinglonFactory&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/stonedong/DZSinglonFactory&quot;&gt;&lt;img src=&quot;http://img.shields.io/travis/stonedong/DZSinglonFactory.svg?style=flat&quot; alt=&quot;CI Status&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoadocs.org/docsets/DZSinglonFactory&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/DZSinglonFactory.svg?style=flat&quot; alt=&quot;Version&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoadocs.org/docsets/DZSinglonFactory&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/l/DZSinglonFactory.svg?style=flat&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoadocs.org/docsets/DZSinglonFactory&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/p/DZSinglonFactory.svg?style=flat&quot; alt=&quot;Platform&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;To run the example project, clone the repo, and run &lt;code&gt;pod install&lt;/code&gt; from the Example directory first.&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;DZSinglonFactory is available through &lt;a href=&quot;http://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt;. To install
it, simply add the following line to your Podfile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod &quot;DZSinglonFactory&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;author&quot;&gt;Author&lt;/h2&gt;

&lt;p&gt;stonedong, yishuiliunian@gmail.com&lt;/p&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;

&lt;p&gt;DZSinglonFactory is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>DZSilkKit</title>
        <link>http://dzpqzb.com/2015/11/11/dzsilkkit.html</link>
        <guid isPermaLink="true">http://dzpqzb.com/2015/11/11/dzsilkkit.html</guid>
        <pubDate>Wed, 11 Nov 2015 19:40:06 +0800</pubDate>
        <description>&lt;h1 id=&quot;dzsilkkit&quot;&gt;DZSilkKit&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/stonedong/DZSilkKit&quot;&gt;&lt;img src=&quot;http://img.shields.io/travis/stonedong/DZSilkKit.svg?style=flat&quot; alt=&quot;CI Status&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoapods.org/pods/DZSilkKit&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/DZSilkKit.svg?style=flat&quot; alt=&quot;Version&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoapods.org/pods/DZSilkKit&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/l/DZSilkKit.svg?style=flat&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoapods.org/pods/DZSilkKit&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/p/DZSilkKit.svg?style=flat&quot; alt=&quot;Platform&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;To run the example project, clone the repo, and run &lt;code&gt;pod install&lt;/code&gt; from the Example directory first.&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;DZSilkKit is available through &lt;a href=&quot;http://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt;. To install
it, simply add the following line to your Podfile:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
pod &quot;DZSilkKit&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;author&quot;&gt;Author&lt;/h2&gt;

&lt;p&gt;stonedong, yishuiliunian@gmail.com&lt;/p&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;

&lt;p&gt;DZSilkKit is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>DZLayoutTable</title>
        <link>http://dzpqzb.com/2015/11/11/dzlayouttable.html</link>
        <guid isPermaLink="true">http://dzpqzb.com/2015/11/11/dzlayouttable.html</guid>
        <pubDate>Wed, 11 Nov 2015 19:38:54 +0800</pubDate>
        <description>&lt;h1 id=&quot;dzlayouttable&quot;&gt;DZLayoutTable&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/stonedong/DZLayoutTable&quot;&gt;&lt;img src=&quot;http://img.shields.io/travis/stonedong/DZLayoutTable.svg?style=flat&quot; alt=&quot;CI Status&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoapods.org/pods/DZLayoutTable&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/DZLayoutTable.svg?style=flat&quot; alt=&quot;Version&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoapods.org/pods/DZLayoutTable&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/l/DZLayoutTable.svg?style=flat&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoapods.org/pods/DZLayoutTable&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/p/DZLayoutTable.svg?style=flat&quot; alt=&quot;Platform&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;To run the example project, clone the repo, and run &lt;code&gt;pod install&lt;/code&gt; from the Example directory first.&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;DZLayoutTable is available through &lt;a href=&quot;http://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt;. To install
it, simply add the following line to your Podfile:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
pod &quot;DZLayoutTable&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;author&quot;&gt;Author&lt;/h2&gt;

&lt;p&gt;stonedong, yishuiliunian@gmail.com&lt;/p&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;

&lt;p&gt;DZLayoutTable is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>DZGeometryTools</title>
        <link>http://dzpqzb.com/2015/11/11/dzgeometrytools.html</link>
        <guid isPermaLink="true">http://dzpqzb.com/2015/11/11/dzgeometrytools.html</guid>
        <pubDate>Wed, 11 Nov 2015 19:37:22 +0800</pubDate>
        <description>&lt;h1 id=&quot;dzgeometrytools&quot;&gt;DZGeometryTools&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/stonedong/DZGeometryTools&quot;&gt;&lt;img src=&quot;http://img.shields.io/travis/stonedong/DZGeometryTools.svg?style=flat&quot; alt=&quot;CI Status&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoadocs.org/docsets/DZGeometryTools&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/DZGeometryTools.svg?style=flat&quot; alt=&quot;Version&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoadocs.org/docsets/DZGeometryTools&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/l/DZGeometryTools.svg?style=flat&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoadocs.org/docsets/DZGeometryTools&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/p/DZGeometryTools.svg?style=flat&quot; alt=&quot;Platform&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;To run the example project, clone the repo, and run &lt;code&gt;pod install&lt;/code&gt; from the Example directory first.&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;DZGeometryTools is available through &lt;a href=&quot;http://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt;. To install
it, simply add the following line to your Podfile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod &quot;DZGeometryTools&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;author&quot;&gt;Author&lt;/h2&gt;

&lt;p&gt;stonedong, yishuiliunian@gmail.com&lt;/p&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;

&lt;p&gt;DZGeometryTools is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>DZAdjustFrame</title>
        <link>http://dzpqzb.com/2015/11/11/dzadjustframe.html</link>
        <guid isPermaLink="true">http://dzpqzb.com/2015/11/11/dzadjustframe.html</guid>
        <pubDate>Wed, 11 Nov 2015 19:34:22 +0800</pubDate>
        <description>&lt;h1 id=&quot;dzadjustframe&quot;&gt;DZAdjustFrame&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/stonedong/DZAdjustFrame&quot;&gt;&lt;img src=&quot;http://img.shields.io/travis/stonedong/DZAdjustFrame.svg?style=flat&quot; alt=&quot;CI Status&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoapods.org/pods/DZAdjustFrame&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/DZAdjustFrame.svg?style=flat&quot; alt=&quot;Version&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoapods.org/pods/DZAdjustFrame&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/l/DZAdjustFrame.svg?style=flat&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://cocoapods.org/pods/DZAdjustFrame&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/p/DZAdjustFrame.svg?style=flat&quot; alt=&quot;Platform&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;To run the example project, clone the repo, and run &lt;code&gt;pod install&lt;/code&gt; from the Example directory first.&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;DZAdjustFrame is available through &lt;a href=&quot;http://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt;. To install
it, simply add the following line to your Podfile:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod &quot;DZAdjustFrame&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;author&quot;&gt;Author&lt;/h2&gt;

&lt;p&gt;stonedong, yishuiliunian@gmail.com&lt;/p&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;

&lt;p&gt;DZAdjustFrame is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;
</description>
      </item>
    
  </channel>
</rss>